version: '3'
services:
  mongo:
    image: mongo
    restart: always

    deploy:
      placement:
        constraints: [node.hostname == ip-172-31-24-157]

    environment:
      MONGO_INITDB_ROOT_USERNAME: mavl
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: dfs
      
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      # - ./mongo-volume:/data/db

  mongo-express:
    image: mongo-express

    deploy:
      placement:
        constraints: [node.hostname == ip-172-31-24-157]
   # restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mavl
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass

    depends_on:
      - mongo

  naming-server:
    image: themavl/dfs-ns
    hostname: '{{.Node.Hostname}}'
    restart: always

    command: python -u dfs_ns.py

    environment:
      HOSTING: aws-many
      PRIVATE_PORT: 33333
      PUBLIC_PORT: 23333

    ports:
      - 23333:23333
      - 33333:33333

    volumes:
      - /var/dfs/fs:/src/fs

    deploy:
      placement:
        constraints: [node.hostname == ip-172-31-24-157]

    depends_on:
      - mongo

  storage-server:
    image: themavl/dfs-ss
    hostname: '{{.Node.Hostname}}'
    ports:
      - 23334:23334
      - 33334:33334
    
    command: python -u dfs_ss.py

    volumes:
      - /var/dfs/storage:/src/storage
      - /var/dfs/config:/src/config

    environment:
      HOSTING: aws-many
      PUBLIC_PORT: 23334
      PRIVATE_PORT: 33334
      NS_PRIVATE_ADDRESS: 172.31.24.157:33333

    deploy:
      mode: global
      # replicas: 2
      restart_policy:
        condition: on-failure

    depends_on:
      - naming-server

  visualizer:
    image: dockersamples/visualizer
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.hostname == ip-172-31-24-157]

